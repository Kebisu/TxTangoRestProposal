openapi: 3.0.0
info:
  title: TX-TANGO REST 
  description: Transics Integration web services
  contact: {}
  version: '0.1'
servers:
- url: https://ft.tx-connect.com/IWS_ASMX/Service.asmx
  description: The *fieldtest* environment of the SOAP web services
  variables: {}
components:
  schemas:
    Error:
      type: object
      required: 
      - code
      - description
      properties:
        code: 
          type: string
          description: code of the error, if you do not manage to solve it, please provide your request with this error code to our service desk
        description:
          type: string
          description: description of the error, to help you solve it
    
    Vehicle:
      type: object
      required:
      - vehicleID
      properties:
        vehicleID: 
          type: string
          description: alfanumeric id of the the vehicle
        licensePlate:
          type: string
    
    Driver:
      type: object
      required:
      - driverID
      properties:
        driverID: 
          type: string
          description: alfanumeric id of the driver
        lastname:
          type: string
        firstname:
          type: string
        tachocardID:
          type: string
          description: tachocard ID that the driver is using to register his driving times
        tachocardCountryOfIssue:
          type: string
          description: The tachocardCountryOfIssue parameter is an ISO 3166-1 alpha-3 country code.
    
    Trailer:
      type: object
      required:
      - trailerID
      properties:
        trailerID: 
          type: string
        licensePlate:
          type: string 
    
    HistoryItem:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        linkedResources:
          type: array
          items:
            type: object
            properties:
              vehicleID:
                type: string
              driverID:
                type: string
              trailerID:
                type: string
        position:
          $ref: "#/components/schemas/Position"
        sensors:
          type: array
          items:
            $ref: "#/components/schemas/Sensor"
         
    State:
      type: object
      properties:
        lastCommunicationTimestamp:
          type: string
          format: date-time
        linkedResources:
          type: array
          items:
            type: object
            properties:
              vehicleID:
                type: string
              driverID:
                type: string
              trailerID:
                type: string
        currentActivity:
          type: object
          properties:
            activityID:
              type: integer
            activityStartDate:
              type: string
              format: date-time
        position:
          allOf:
            - $ref: "#/components/schemas/Position"
            - type: object
              properties:
                positionTimestamp:
                  type: string
                  format: date-time 
        sensors:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Sensor"
              - type: object
                properties:
                  sensorTimestamp:
                    type: string
                    format: date-time 
        eta:
          type: object
          properties:
            name:
              type: string
            currentEta:
              type: string
              format: date-time
            calculationAtTimeStamp:
              type: string
              format: date-time
        
    Position:
      type: object
      required:
      - latitude
      - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        mileage:
          type: integer
        heading:
          type: number
          format: double
        speed: 
          type: number
          format: double
        elevation:
          type: number
          format: double
        address:
          type: string
    
    Sensor:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        value:
          type: string
          
    Event:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        linkedResources:
          type: array
          items:
            type: object
            properties:
              vehicleID:
                type: string
              driverID:
                type: string
              trailerID:
                type: string
        eventType:
          type: string
          enum: [alarm, tacho, planning]
        eventText:
          type: string
        eventProperties:
          type: object
          minProperties: 0
          maxProperties: 10
        position:
          $ref: "#/components/schemas/Position"
          
  parameters:
    vehicleIdParam:
      name: vehicleID
      in: path
      required: true
      description: alphanumeric ID of a vehicle
      schema:
        type: string
        minimum: 1
    driverIdParam:
      name: driverID
      in: path
      required: true
      description: alphanumeric ID of a driver
      schema:
        type: string
        minimum: 1
    trailerIdParam:
      name: trailerID
      in: path
      required: true
      description: alphanumeric ID of a trailer
      schema:
        type: string
        minimum: 1
    fromParam:
      name: from
      in: query
      required: true
      description: start date when selecting
      schema:
        type: string
        format: date-time
        minimum: 1
    untilParam:
      name: until
      in: query
      required: true
      description: start date when selecting
      schema:
        type: string
        format: date-time
        minimum: 1
    sensorParam:
      name: sensors
      in: query
      required: false
      description: add sensors to the response of this web service
      explode: false
      schema:
        type: array
        items:
          type: string
paths:
  /vehicles:
    summary: list of vehicles
    description: returns the list of vehicles that are linked to this account
    get:
      tags: 
        - list
      summary: get the list of vehicles
      description: the full list of vehicles linked to this account
      operationId: getVehicles
      parameters: 
        - name: filterByLicensePlate
          in: query
          required: false
          description: license plate of a vehicle
          schema:
            type: string
      responses:
        '200':
          description: list of vehicles
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
      deprecated: false
  /vehicles/{vehicleID}:
    summary: represents a vehicle
    description: a vehicle is represented by his vehicleID
    parameters:
      - $ref: '#/components/parameters/vehicleIdParam'
    get:
      tags: 
        - CRUD
      summary: a single vehicles
      description: returns the information of a single vehicle
      operationId: getVehicleByVehicleID
      responses:
        '200':
          description: A vehicle object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      deprecated: false
    put: 
      tags: 
        - CRUD
      summary: update a vehicle
      description: Updates a single vehicle
      operationId: updateVehicleByVehicleID
      responses:
        '200':
          description: A vehicle object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      deprecated: false
    delete:
      tags: 
        - CRUD
      summary: delete a vehicle
      description: deletes a single vehicle
      operationId: deleteVehicleByVehicleID
      responses:
        '200':
          description: A vehicle object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      deprecated: false
  /drivers:
    summary: list of drivers
    description: returns the list of drivers that are linked to this account
    get:
      tags: 
        - list
      summary: get the list of drivers
      description: the full list of drivers linked to this account
      operationId: getDrivers
      responses:
        '200':
          description: list of drivers
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      deprecated: false
  /drivers/{driverID}:
    summary: retrieve one driver
    description: retrieve a driver based on his driverID
    parameters:
      - $ref: '#/components/parameters/driverIdParam'
    get:
      tags: 
        - CRUD
      summary: return one driver
      description: returns the information of a single driver
      operationId: getDriverByDriverID
      responses:
        '200':
          description: A driver object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
      deprecated: false
    put: 
      tags: 
        - CRUD
      summary: update a driver
      description: Updates a single driver
      operationId: updateDriverByDriverID
      responses:
        '200':
          description: A driver object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
      deprecated: false
    delete:
      tags: 
        - CRUD
      summary: delete a driver
      description: deletes a single driver
      operationId: deleteDriverByDriverID
      responses:
        '200':
          description: A driver object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
      deprecated: false
  /trailers:
    summary: list of trailers
    description: returns the list of trailers that are linked to this account
    get:
      tags: 
        - list
      summary: get the list of trailers
      description: the full list of trailers linked to this account
      operationId: getTrailers
      responses:
        '200':
          description: list of trailers
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trailer'
      deprecated: false
  /trailers/{trailerID}:
    summary: retrieve one trailer
    description: retrieve a trailer based on his trailerID
    parameters:
      - $ref: '#/components/parameters/trailerIdParam'
    get:
      tags: 
        - CRUD
      summary: return one trailer
      description: returns the information of a single trailer
      operationId: getTrailerByTrailerID
      responses:
        '200':
          description: A trailer object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trailer'
      deprecated: false
    put: 
      tags: 
        - CRUD
      summary: update a trailer
      description: Updates a single trailer
      operationId: updateTrailerByTrailerID
      responses:
        '200':
          description: A trailer object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trailer'
      deprecated: false
    delete:
      tags: 
        - CRUD
      summary: delete a trailer
      description: deletes a single trailer
      operationId: deleteTrailerByTrailerID
      responses:
        '200':
          description: A trailer object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trailer'
      deprecated: false
  /vehicles/{vehicleID}/history:
    summary: historical vehicle data
    description: search throught the historical data (postions, mileage, sensors) of a vehicle based on his vehicleID, add parameters to include extra sensor information
    parameters:
      - $ref: '#/components/parameters/vehicleIdParam'
      - $ref: '#/components/parameters/fromParam'
      - $ref: '#/components/parameters/untilParam'
      - $ref: '#/components/parameters/sensorParam'
    get:
      tags: 
        - history
      summary: historical vehicle data
      description: search throught the historical data of a vehicle based on his vehicleID, add parameters to include extra sensor information
      operationId: getHistoricalVehicleData
      responses:
        '200':
          description: An array of historical vehicle information
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicleID: 
                    type: string
                  historyItems:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoryItem"
      deprecated: false
  /trailer/{trailerID}/history:
    summary: historical trailer data
    description: search throught the historical data (postions, mileage, sensors) of a trailer based on his trailerID, add parameters to include extra sensor information
    parameters:
      - $ref: '#/components/parameters/trailerIdParam'
      - $ref: '#/components/parameters/fromParam'
      - $ref: '#/components/parameters/untilParam'
      - $ref: '#/components/parameters/sensorParam'
    get:
      tags: 
        - history
      summary: historical trailer data
      description: search throught the historical data of a trailer based on his trailerID, add parameters to include extra sensor information
      operationId: getHistoricalTrailerData
      responses:
        '200':
          description: An array of historical trailer information
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  trailerID: 
                    type: string
                  historyItems:
                    type: array
                    items:
                      $ref: "#/components/schemas/HistoryItem"
      deprecated: false

  /vehicles/{vehicleID}/state:
    summary: current vehicle state
    description: get the current vehicle information like postions, mileage, sensors of a vehicle based on his vehicleID, add parameters to include extra sensor information
    parameters:
      - $ref: '#/components/parameters/vehicleIdParam'
      - $ref: '#/components/parameters/sensorParam'
    get:
      tags: 
        - state
      summary: current vehicle state
      description: get the current vehicle information like(postions, mileage, sensors) of a vehicle based on his vehicleID, add parameters to include extra sensor information
      operationId: getVehicleState
      responses:
        '200':
          description: A state object
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicleID: 
                    type: string
                  currentState:
                    $ref: "#/components/schemas/State"
      deprecated: false
      
  /trailers/{trailerID}/state:
    summary: current trailer state
    description: get the current trailer information like(postions, mileage, sensors) of a trailer based on his trailerID, add parameters to include extra sensor information
    parameters:
      - $ref: '#/components/parameters/trailerIdParam'
      - $ref: '#/components/parameters/sensorParam'
    get:
      tags: 
        - state
      summary: current trailer state
      description: get the current trailer information like(postions, mileage, sensors) of a trailer based on his trailerID, add parameters to include extra sensor information
      operationId: getTrailerState
      responses:
        '200':
          description: A state object
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  trailerID: 
                    type: string
                  currentState:
                    $ref: "#/components/schemas/State"
      deprecated: false
  
  /vehicles/{vehicleID}/events:
    summary: get the vehicle events
    description: get a historic overview of the vehicle events like alarms, planning feedback or tacho state changes of a vehicle based on his vehicleID
    parameters:
      - $ref: '#/components/parameters/vehicleIdParam'
      - $ref: '#/components/parameters/fromParam'
      - $ref: '#/components/parameters/untilParam'
      - $ref: '#/components/parameters/sensorParam'    
    get:
      tags:
        - events
      summary: get the vehicle events
      description: get a historic overview of the vehicle events like alarms, planning feedback or tacho state changes of a vehicle based on his vehicleID
      operationId: getVehicleEvents
      responses:
        '200':
          description: An array of event object
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicleID: 
                    type: string
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
      deprecated: false
      
  /trailers/{trailerID}/events:
    summary: get the trailer events
    description: get a historic overview of the trailer events like alarms, planning feedback or tacho state changes of a trailer based on his trailerID
    parameters:
      - $ref: '#/components/parameters/trailerIdParam'
      - $ref: '#/components/parameters/fromParam'
      - $ref: '#/components/parameters/untilParam'
      - $ref: '#/components/parameters/sensorParam'    
    get:
      tags:
        - events
      summary: get the trailer events
      description: get a historic overview of the trailer events like alarms, planning feedback or tacho state changes of a trailer based on his trailerID
      operationId: getTrailerEvents
      responses:
        '200':
          description: An array of event object
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  trailerID: 
                    type: string
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
      deprecated: false  
